rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write only their own user document
    match /users/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }

    // Establishments: owner can create/update/delete; any authed user can read
    match /establishments/{id} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Orders: owner can create/update/delete; any authed user can read
    match /orders/{id} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Products: owner can create/update/delete; any authed user can read
    match /products/{id} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Losses: owner can create/update/delete; any authed user can read
    match /losses/{id} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Sales: owner can create/update/delete; any authed user can read
    match /sales/{id} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Agent links: public read (permet à l'agent d'obtenir l'événement assigné)
    match /agentLinks/{agentCode} {
      allow read: if true;
      // Écriture seulement par le propriétaire authentifié (côté gérant)
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Events readable publicly (public page), owner can manage
    match /events/{id} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Tickets can be created publicly;
    // Owner can read/update/delete;
    // Agents assigned to the event can update only check-in fields (without requiring auth),
    // validated by the agentLinks document referenced by checkedInBy (agentCode).
    match /tickets/{id} {
      allow create: if true;
      allow read, update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;

      // Permit check-in by assigned event agents (no auth required, but strict validation)
      allow update: if
        // 0) Only allow changing check-in related fields
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['checkedIn','checkedInAt','checkedInBy'])
        &&
        // 1) An agentCode must be provided
        (request.resource.data.checkedInBy is string)
        &&
        // 2) The agent link must exist and be active and match owner/event
        exists(/databases/$(database)/documents/agentLinks/$(request.resource.data.checkedInBy))
        && get(/databases/$(database)/documents/agentLinks/$(request.resource.data.checkedInBy)).data.status == 'active'
        && get(/databases/$(database)/documents/agentLinks/$(request.resource.data.checkedInBy)).data.ownerUid == resource.data.ownerUid
        && get(/databases/$(database)/documents/agentLinks/$(request.resource.data.checkedInBy)).data.assignedEventId == resource.data.eventId;
    }

    // Team members: owner can manage; agents can read their own doc id if authenticated (optional)
    match /teamMembers/{id} {
      // Owner can read/manage any of their team members
      allow read: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;

      // Optional: allow an authenticated agent to read their own teamMember doc
      allow read: if request.auth != null && id == request.auth.uid;
      allow update: if false; // agents cannot update their doc via client
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 